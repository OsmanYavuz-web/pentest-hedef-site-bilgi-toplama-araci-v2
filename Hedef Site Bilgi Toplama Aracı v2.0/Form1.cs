/*
 * 
 * 
 * 
	* Pentest Hedef Site Bilgi Toplama Aracı programının tasarımı ve kodlaması "Osman Yavuz" tarafından yapılmıştır.
	* https://twitter.com/omnyvz
    * https://www.facebook.com/omnyvz
    * http://hatosbilisim.com/
    * http://blog.hatosbilisim.com
 * 
 * 
 * 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

/* Eklenenler */
using HtmlAgilityPack;
using System.Net;
using System.Text.RegularExpressions;
using System.IO;
using System.Threading;
using System.Diagnostics;
using Microsoft.Win32;

namespace Hedef_Site_Bilgi_Toplama_Aracı_v2._0
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // Değişkenler
        string hedefSite = null;
        Thread tTaramaIslemi;
        public string veri;

        #region FROM_LOAD
        private void Form1_Load(object sender, EventArgs e)
        {
            //Form Size
            this.Size = new Size(917, 647);

            //Thread Çalıştırma
            CheckForIllegalCrossThreadCalls = false;

            //File Spider Dosya Türleri
            dosya_Turleri_Aktar();
        }
        #endregion

        #region Taramayı Başlat
        private void button_Baslat_Click(object sender, EventArgs e)
        {
            hedefSite = textBox_HedefSite.Text;

            if (hedefSite == "" || hedefSite.Length < 2)
            {
                MessageBox.Show("Taramayı başlatabilmek için hedef site girmelisiniz.","Bilgi",MessageBoxButtons.OK,MessageBoxIcon.Information);
            }
            else
            {
                hedefSite = hedefSite.Replace("http://","");
                hedefSite = hedefSite.Replace("https://", "");
                hedefSite = hedefSite.Replace("www.", "");
                hedefSite = hedefSite.Replace("/", "");

                //Buton Aktifliği
                button_Baslat.Enabled = false;
                button_Durdur.Enabled = true;
                tabControl1.UseWaitCursor = true;
                textBox_HedefSite.Enabled = false;
                listBox_FileSpider_DosyaTurleri.Enabled = false;
                button_FileSpider_DosyaTuruEkle.Enabled = false;
                button_FileSpider_SeciliDosyaTuruSil.Enabled = false;

                //Tarama Başlat
                tTaramaIslemi = new Thread(new ThreadStart(vTaramaIslemi));
                tTaramaIslemi.Start();

                //Durum Bilgisi
                StatusLabel1.Text = hedefSite + " sitesi için tarama başladı.";
            }
        }
        #endregion

        #region Taramyı Durdur
        private void button_Durdur_Click(object sender, EventArgs e)
        {
            try
            {
                //Tarama Durdur
                tTaramaIslemi.Abort();

                //Buton Aktifliği
                button_Durdur.Enabled = false;
                button_Baslat.Enabled = true;
                tabControl1.UseWaitCursor = false;
                textBox_HedefSite.Enabled = true;
                listBox_FileSpider_DosyaTurleri.Enabled = true;
                button_FileSpider_DosyaTuruEkle.Enabled = true;
                button_FileSpider_SeciliDosyaTuruSil.Enabled = true;

                //Durum Bilgisi.
                StatusLabel1.Text = hedefSite + " hedef site taraması iptal edildi.";
            }
            catch 
            {
                //Buton Aktifliği
                button_Durdur.Enabled = false;
                button_Baslat.Enabled = true;
                tabControl1.UseWaitCursor = false;
                textBox_HedefSite.Enabled = true;
                listBox_FileSpider_DosyaTurleri.Enabled = true;
                button_FileSpider_DosyaTuruEkle.Enabled = true;
                button_FileSpider_SeciliDosyaTuruSil.Enabled = true;

                //Durum Bilgisi.
                StatusLabel1.Text = hedefSite + " hedef site taraması iptal edildi.";
            }
        }
        #endregion

        #region Veri Ayıklama Fonksiyon
        void veriAyiklama(string kaynakKod, string ilkVeri, int ilkVeriKS, string sonVeri)
        {
            try
            {
                string gelen = kaynakKod;
                int titleIndexBaslangici = gelen.IndexOf(ilkVeri) + ilkVeriKS;
                int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf(sonVeri);
                veri = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
            }
            catch //(Exception ex)
            {
               //MessageBox.Show("Hata: " + ex.Message, "Hata;", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region TARAMA İŞLEMİ SİSTEM
        void vTaramaIslemi()
        {
            //Temizlik ve Düzeltmeler
            temizlik();

            /* Kodun Çalışma Süresi Başlangıç */
            Stopwatch sw = new Stopwatch();
            sw.Start();

            HttpWebRequest istek = (HttpWebRequest)HttpWebRequest.Create("http://api.hackertarget.com/httpheaders/?q=" + hedefSite);

            #region Proxy UserAgent
            /*//Proxy
            if (INI.Read("Ayarlar", "ProxyAktif") == "Evet")
            {
                string adres = INI.Read("Ayarlar", "ProxyAdres");
                string port = INI.Read("Ayarlar", "ProxyPort");
                istek.Proxy = new WebProxy(adres, int.Parse(port));
            }

            //User Agent
            if (INI.Read("Ayarlar", "UserAgentAktif") == "Evet")
            {
                //Rastgele Agent
                Random rastgele = new Random();
                listBox_UserAgentList.SelectedIndex = rastgele.Next(0, listBox_UserAgentList.Items.Count);
                //User Agent
                istek.UserAgent = listBox_UserAgentList.Text;
            }*/
            #endregion

            try
            {
                HttpWebResponse cevap = (HttpWebResponse)istek.GetResponse();
                if (cevap.StatusCode == HttpStatusCode.OK)
                {
                    Stream receiveStream = cevap.GetResponseStream();
                    StreamReader readStream = null;
                    if (cevap.CharacterSet == null)
                    {
                        readStream = new StreamReader(receiveStream);
                    }
                    else
                    {
                        readStream = new StreamReader(receiveStream, Encoding.GetEncoding(cevap.CharacterSet));
                    }
                    string html = readStream.ReadToEnd();
                    cevap.Close();
                    readStream.Close();

                    /* İşlemler */
                    if (html.IndexOf("unable to connect to HTTP port") != -1)
                    {
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " ile kaynaklar arasında hata oluştu. Hedef adresinizi kontrol edip tekrar deneyiniz.";
                        MessageBox.Show(hedefSite + " ile kaynaklar arasında hata oluştu. Hedef adresinizi kontrol edip tekrar deneyiniz.", "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        //Buton Aktifliği
                        button_Durdur.Enabled = false;
                        button_Baslat.Enabled = true;
                        tabControl1.UseWaitCursor = false;
                        textBox_HedefSite.Enabled = true;
                        listBox_FileSpider_DosyaTurleri.Enabled = true;
                        button_FileSpider_DosyaTuruEkle.Enabled = true;
                        button_FileSpider_SeciliDosyaTuruSil.Enabled = true;

                    }
                    else
                    {
                        /* HTTP Headers Aktif */
                        richTextBox_HTTPHeaders.Text = html;
                        //Server Bilgisi
                        veriAyiklama(richTextBox_HTTPHeaders.Text, "Server: ", 8, "\n");
                        if (veri.IndexOf("OK") != -1)
                        {
                            textBox_HedefServerBilgisi.Text = "";
                        }
                        else
                        {
                            textBox_HedefServerBilgisi.Text = veri;
                        }
                        //Kodlandığı Dil
                        veriAyiklama(richTextBox_HTTPHeaders.Text, "X-Powered-By: ", 14, "\n");
                        if (veri.IndexOf("Moved Permanently") != -1 || veri.IndexOf("OK") != -1)
                        {
                            textBox_HedefKodlamaBilgisi.Text = "Belirlenemedi";
                        }
                        else
                        {
                            textBox_HedefKodlamaBilgisi.Text = veri;
                        }
                        //Yönlendirilen Sayfa
                        veriAyiklama(richTextBox_HTTPHeaders.Text, "Location: ", 10, "\n");
                        if (veri.Length > 5)
                        {
                            textBox_HedefYonlendirilenSite.Text = veri;
                        }

                        /* Test Ping Aktif */
                        //testPing();

                        /* Trace Route Aktif */
                        // TraceRoute();

                        /* ReverseIP Aktif */
                        // ReverseIP();

                        /* Spider */
                        //spider();

                        /* File Spider */
                        //fileSpider();

                        /* DNS Lookup */
                        //dnsLookup();

                        /* Reverse DNS */
                        //reverseDNS();
                        //reverseDNS2();

                        /* Whois */
                        //whois();
                        //whois2();

                        /* Nmap */
                       // NMAP();

                        /* Robots.txt */
                        robotsTXT();

                        //Buton Aktifliği
                        button_Durdur.Enabled = false;
                        button_Baslat.Enabled = true;
                        tabControl1.UseWaitCursor = false;
                        textBox_HedefSite.Enabled = true;
                        listBox_FileSpider_DosyaTurleri.Enabled = true;
                        button_FileSpider_DosyaTuruEkle.Enabled = true;
                        button_FileSpider_SeciliDosyaTuruSil.Enabled = true;

                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkGreen;
                        StatusLabel1.Text = hedefSite + " tarama işlemi tamamlandı.";
                        MessageBox.Show(hedefSite + " tarama işlemi tamamlandı.", "Bilgi", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    }
                }
                else if (cevap.StatusCode == HttpStatusCode.NotFound)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " ile kaynaklar arasında hata oluştu. Hedef adresinizi kontrol edip tekrar deneyiniz.";
                    MessageBox.Show(hedefSite + " ile kaynaklar arasında hata oluştu. Hedef adresinizi kontrol edip tekrar deneyiniz.", "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);

                    //Thread Durdurma
                    tTaramaIslemi.Abort();

                    //Buton Aktifliği
                    button_Durdur.Enabled = false;
                    button_Baslat.Enabled = true;
                    tabControl1.UseWaitCursor = false;
                    textBox_HedefSite.Enabled = true;
                    listBox_FileSpider_DosyaTurleri.Enabled = true;
                    button_FileSpider_DosyaTuruEkle.Enabled = true;
                    button_FileSpider_SeciliDosyaTuruSil.Enabled = true;
                }
                /* Kodun Çalışma Süresi Bitiş */
                sw.Stop();
                label_GecenZaman.Text = "Geçen Zaman: " + sw.Elapsed.Seconds.ToString() + " SN";
            }
            catch (Exception ex)
            {
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = "Kaynak sitelere erişilemiyor. Hata: " + ex.Message;
                MessageBox.Show("Kaynak sitelere erişilemiyor.\nHata: " + ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);

                //Buton Aktifliği
                button_Durdur.Enabled = false;
                button_Baslat.Enabled = true;
                tabControl1.UseWaitCursor = false;
                textBox_HedefSite.Enabled = true;
                listBox_FileSpider_DosyaTurleri.Enabled = true;
                button_FileSpider_DosyaTuruEkle.Enabled = true;
                button_FileSpider_SeciliDosyaTuruSil.Enabled = true;
            }
        }
        #endregion

        #region Test Ping
        private void testPing()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/nping/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                richTextBox_TestPing.Text = html;

                /* Test Ping Hatası Olursa */
                if (html.IndexOf("error check your api query") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Ping bilgisi alınamadı.";
                    textBox_TestPingAciklama.Text = "Hedefin Ping bilgisi alınamadı.";
                }
                else
                {
                    //Paket Arama
                    for (int i = 0; i < 8; i++)
                    {
                        string gelen = html;
                        int titleIndexBaslangici = gelen.IndexOf("RCVD ") + 6;
                        int titleIndexBitisi = gelen.Substring(titleIndexBaslangici).IndexOf(" ]");
                        string cikti = gelen.Substring(titleIndexBaslangici, titleIndexBitisi);
                        textBox_TestPingAciklama.Text = "RCVD " + cikti.ToString() + " ]";
                    }

                    //TTL Araştırması
                    string gelen2 = textBox_TestPingAciklama.Text;
                    int titleIndexBaslangici2 = gelen2.IndexOf("ttl=") + 4;
                    int titleIndexBitisi2 = gelen2.Substring(titleIndexBaslangici2).IndexOf(" ");
                    string cikti2 = gelen2.Substring(titleIndexBaslangici2, titleIndexBitisi2);
                    if (cikti2 == "56" || int.Parse(cikti2) < 56)
                    {
                        textBox_TahminiIsletimSistemi.Text = "Linux";
                    }
                    else if (cikti2 == "128" || int.Parse(cikti2) < 128)
                    {
                        textBox_TahminiIsletimSistemi.Text = "Windows";
                    }
                    else if (cikti2 == "254" || int.Parse(cikti2) < 254)
                    {
                        textBox_TahminiIsletimSistemi.Text = "Cisco";
                    }
                    
                    veriAyiklama(textBox_TestPingAciklama.Text, "[", 1, " >");
                    textBox_HedefinIPAdresi.Text = veri;

                }
            }
            catch
            {
                /* Test Ping Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Ping bilgisi alınamadı.";
                textBox_TestPingAciklama.Text = "Hedefin Ping bilgisi alınamadı.";
            }
        }
        #endregion

        #region TraceRoute
        private void TraceRoute()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/mtr/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                
                /* TraceRoute Hatası Olursa */
                if (html.IndexOf("error check your api query") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin TraceRotue bilgisi alınamadı.";
                    richTextBox_TraceRoute.Text = "Hedefin TraceRotue bilgisi alınamadı.";
                }
                else
                {
                    richTextBox_TraceRoute.Text = html;
                }
            }
            catch
            {
                /* TraceRoute Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin TraceRotue bilgisi alınamadı.";
                richTextBox_TraceRoute.Text = "Hedefin TraceRotue bilgisi alınamadı.";
            }
        }
        #endregion

        #region Reverse IP
        private void ReverseIP()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/reverseiplookup/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);

                /* Reverse IP Hatası Olursa */
                if (html.IndexOf("error check your search parameter") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Reverse IP bilgisi alınamadı.";
                    richTextBox_TraceRoute.Text = "Hedefin Reverse IP bilgisi alınamadı.";
                }
                else
                {
                    //Siteleri Aktar
                    string[] siteler = html.Split('\n');
                    foreach (string site in siteler)
                    {
                        listBox_ReverseIPList.Items.Add(site);
                    }
                    //Site Sayısı
                    textBox_ReverseIP_ToplamSite.Text = listBox_ReverseIPList.Items.Count.ToString();
                }
            }
            catch 
            {
                /* ReverseIP Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Reverse IP bilgisi alınamadı.";
                richTextBox_TraceRoute.Text = "Hedefin Reverse IP bilgisi alınamadı.";
            }
        }
        //Listeden Site Seç
        private void listBox_ReverseIPList_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_ReverseIP_SeciliSite.Text = listBox_ReverseIPList.Text;
        }
        //Seçili Siteyi Aç
        private void button1_Click(object sender, EventArgs e)
        {
            if (textBox_ReverseIP_SeciliSite.Text != "")
            {
                string key = @"http\shell\open\command";
                RegistryKey registryKey =
                Registry.ClassesRoot.OpenSubKey(key, false);
                string defaultbrowserpath =
                ((string)registryKey.GetValue(null, null)).Split('"')[1];
                Process.Start(defaultbrowserpath, textBox_ReverseIP_SeciliSite.Text);
            }
        }
        #endregion

        #region Spider Sorgusu
        private void spider()
        {
            //1. Sayfa 100 URL
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "&start=0");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri2 in XPath)
                {
                    //Veri Ayıklama
                    veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                    veri = veri.Replace("%3F", "?");
                    veri = veri.Replace("%3D", "=");
                    if (listBox_SpiderList.Items.Contains(veri) == false)
                    {
                        listBox_SpiderList.Items.Add(veri);
                    }
                }
                //Toplam url
                textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
            }
            catch (Exception ex)
            {
                /* Spider Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Spider sorgusu yapılamadı. Hata: " + ex.Message;
            }
            //2. Sayfa 100 URL
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "&start=10");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri2 in XPath)
                {
                    //Veri Ayıklama
                    veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                    veri = veri.Replace("%3F", "?");
                    veri = veri.Replace("%3D", "=");
                    if (listBox_SpiderList.Items.Contains(veri) == false)
                    {
                        listBox_SpiderList.Items.Add(veri);
                    }
                }
                //Toplam url
                textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
            }
            catch (Exception ex)
            {
                /* Spider Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Spider sorgusu yapılamadı. Hata: " + ex.Message;
            }
            //3. Sayfa 100 URL
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "&start=20");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri2 in XPath)
                {
                    //Veri Ayıklama
                    veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                    veri = veri.Replace("%3F", "?");
                    veri = veri.Replace("%3D", "=");
                    if (listBox_SpiderList.Items.Contains(veri) == false)
                    {
                        listBox_SpiderList.Items.Add(veri);
                    }
                }
                //Toplam url
                textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
            }
            catch (Exception ex)
            {
                /* Spider Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Spider sorgusu yapılamadı. Hata: " + ex.Message;
            }
            //4. Sayfa 100 URL
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "&start=30");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri2 in XPath)
                {
                    //Veri Ayıklama
                    veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                    veri = veri.Replace("%3F", "?");
                    veri = veri.Replace("%3D", "=");
                    if (listBox_SpiderList.Items.Contains(veri) == false)
                    {
                        listBox_SpiderList.Items.Add(veri);
                    }
                }
                //Toplam url
                textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
            }
            catch (Exception ex)
            {
                /* Spider Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Spider sorgusu yapılamadı. Hata: " + ex.Message;
            }
            //5. Sayfa 100 URL
            try
            {
                //textBox_SpiderSite
                Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "&start=40");
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);
                HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                foreach (var veri2 in XPath)
                {
                    //Veri Ayıklama
                    veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                    veri = veri.Replace("%3F", "?");
                    veri = veri.Replace("%3D", "=");
                    if (listBox_SpiderList.Items.Contains(veri) == false)
                    {
                        listBox_SpiderList.Items.Add(veri);
                    }
                }
                    //Toplam url
                    textBox_Spider_ToplamURL.Text = listBox_SpiderList.Items.Count.ToString();
                
            }
            catch (Exception ex)
            {
                /* Spider Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Spider sorgusu yapılamadı. Hata: " + ex.Message;
            }
        }
        //Listeden Site Seç
        private void listBox_SpiderList_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_Spider_SeciliAdres.Text = listBox_SpiderList.Text;

        }
        //Seçili Siteyi Aç
        private void button2_Click(object sender, EventArgs e)
        {
            if (textBox_Spider_SeciliAdres.Text != "")
            {
                string key = @"http\shell\open\command";
                RegistryKey registryKey =
                Registry.ClassesRoot.OpenSubKey(key, false);
                string defaultbrowserpath =
                ((string)registryKey.GetValue(null, null)).Split('"')[1];
                Process.Start(defaultbrowserpath, textBox_Spider_SeciliAdres.Text);
            }
        }
        #endregion

        #region File Spider
        private void fileSpider()
        {
            for (int i = 0; listBox_FileSpider_DosyaTurleri.Items.Count > i; i++)
            {
                if (listBox_FileSpider_DosyaTurleri.Items.Count - 1 == listBox_FileSpider_DosyaTurleri.SelectedIndex) 
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkGreen;
                    StatusLabel1.Text = hedefSite + " hedefin File Spider sorgusu tamamlandı tüm dosya türleri tarandı.";
                    //Aktiflik
                    listBox_FileSpider_DosyaTurleri.Enabled = true;
                }
                else
                {
                    //Dosya Türünü Bir Arttır
                    listBox_FileSpider_DosyaTurleri.SelectedIndex = listBox_FileSpider_DosyaTurleri.SelectedIndex + 1;
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.Blue;
                    StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider tarafından araştırılıyor.";

                    //1. Sayfa 100 URL
                    try
                    {
                        //textBox_SpiderSite
                        Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text + "&start=0");
                        WebClient client = new WebClient();
                        string html = client.DownloadString(url);
                        HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                        dokuman.LoadHtml(html);
                        HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                        foreach (var veri2 in XPath)
                        {
                            //Veri Ayıklama
                            veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                            veri = veri.Replace("%3F", "?");
                            veri = veri.Replace("%3D", "=");
                            if (listBox_FileSpider_Sonuclar.Items.Contains(veri) == false)
                            {
                                listBox_FileSpider_Sonuclar.Items.Add(veri);
                            }
                        }
                        //Toplam url
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();

                    }
                    catch (Exception ex)
                    {
                        /* Spider Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider yapıldı fakat bir sonuç bulunamadı. Hata: " + ex.Message;
                    }
                    //2. Sayfa 100 URL
                    try
                    {

                        //textBox_SpiderSite
                        Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text + "&start=10");
                        WebClient client = new WebClient();
                        string html = client.DownloadString(url);
                        HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                        dokuman.LoadHtml(html);
                        HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                        foreach (var veri2 in XPath)
                        {
                            //Veri Ayıklama
                            veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                            veri = veri.Replace("%3F", "?");
                            veri = veri.Replace("%3D", "=");
                            if (listBox_FileSpider_Sonuclar.Items.Contains(veri) == false)
                            {
                                listBox_FileSpider_Sonuclar.Items.Add(veri);
                            }
                        }
                        //Toplam url
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();
                    }
                    catch (Exception ex)
                    {
                        /* Spider Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider yapıldı fakat bir sonuç bulunamadı. Hata: " + ex.Message;
                    }
                    //3. Sayfa 100 URL
                    try
                    {

                        //textBox_SpiderSite
                        Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text + "&start=20");
                        WebClient client = new WebClient();
                        string html = client.DownloadString(url);
                        HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                        dokuman.LoadHtml(html);
                        HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                        foreach (var veri2 in XPath)
                        {
                            //Veri Ayıklama
                            veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                            veri = veri.Replace("%3F", "?");
                            veri = veri.Replace("%3D", "=");
                            if (listBox_FileSpider_Sonuclar.Items.Contains(veri) == false)
                            {
                                listBox_FileSpider_Sonuclar.Items.Add(veri);
                            }
                        }
                        //Toplam url
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();
                    }
                    catch (Exception ex)
                    {
                        /* Spider Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider yapıldı fakat bir sonuç bulunamadı. Hata: " + ex.Message;
                    }
                    //4. Sayfa 100 URL
                    try
                    {

                        //textBox_SpiderSite
                        Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text + "&start=30");
                        WebClient client = new WebClient();
                        string html = client.DownloadString(url);
                        HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                        dokuman.LoadHtml(html);
                        HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                        foreach (var veri2 in XPath)
                        {
                            //Veri Ayıklama
                            veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                            veri = veri.Replace("%3F", "?");
                            veri = veri.Replace("%3D", "=");
                            if (listBox_FileSpider_Sonuclar.Items.Contains(veri) == false)
                            {
                                listBox_FileSpider_Sonuclar.Items.Add(veri);
                            }
                        }
                        //Toplam url
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();
                    }
                    catch (Exception ex)
                    {
                        /* Spider Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider yapıldı fakat bir sonuç bulunamadı. Hata: " + ex.Message;
                    }
                    //5. Sayfa 100 URL
                    try
                    {

                        //textBox_SpiderSite
                        Uri url = new Uri("https://www.google.com.tr/search?num=5000&q=site:" + hedefSite + "+filetype:" + listBox_FileSpider_DosyaTurleri.Text + "&start=40");
                        WebClient client = new WebClient();
                        string html = client.DownloadString(url);
                        HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                        dokuman.LoadHtml(html);
                        HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("//h3[@class='r']");
                        foreach (var veri2 in XPath)
                        {
                            //Veri Ayıklama
                            veriAyiklama(veri2.InnerHtml, textBox2.Text, textBox2.TextLength, textBox4.Text);
                            veri = veri.Replace("%3F", "?");
                            veri = veri.Replace("%3D", "=");
                            if (listBox_FileSpider_Sonuclar.Items.Contains(veri) == false)
                            {
                                listBox_FileSpider_Sonuclar.Items.Add(veri);
                            }
                        }
                        //Toplam url
                        textBox_FileSpider.Text = listBox_FileSpider_Sonuclar.Items.Count.ToString();
                    }
                    catch (Exception ex)
                    {
                        /* Spider Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin için " + listBox_FileSpider_DosyaTurleri.Text + " dosya türü File Spider yapıldı fakat bir sonuç bulunamadı. Hata: " + ex.Message;
                    }
                }
            }
        }

        //Seçili URL
        private void listBox_FileSpider_Sonuclar_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_FileSpider_SeciliURL.Text = listBox_FileSpider_Sonuclar.Text;
        }

        //Seçili Siteyi Aç
        private void button3_Click(object sender, EventArgs e)
        {
            if (textBox_FileSpider_SeciliURL.Text != "")
            {
                string key = @"http\shell\open\command";
                RegistryKey registryKey =
                Registry.ClassesRoot.OpenSubKey(key, false);
                string defaultbrowserpath =
                ((string)registryKey.GetValue(null, null)).Split('"')[1];
                Process.Start(defaultbrowserpath, textBox_FileSpider_SeciliURL.Text);
            }
        }
        //File Spider Dosya Türleri
        private void dosya_Turleri_Aktar()
        {
            try
            {
                string dosyaTurleri = Application.StartupPath + @"\FileType.txt";

                if (!File.Exists(dosyaTurleri))
                {
                    MessageBox.Show("File Spider için dosya türlerinin bulunduğu 'FileType.txt' dosyası yok!", "Hata; ", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                StreamReader oku;
                oku = File.OpenText(dosyaTurleri);

                string yazi;
                while ((yazi = oku.ReadLine()) != null)
                {
                    listBox_FileSpider_DosyaTurleri.Items.Add(yazi.ToString());
                }
                oku.Close();
                listBox_FileSpider_DosyaTurleri.SelectedIndex = 0;
            }
            catch
            {

            }
        }
        //Seçili Dosya Türü Sil
        private void button_FileSpider_SeciliDosyaTuruSil_Click(object sender, EventArgs e)
        {
            listBox_FileSpider_DosyaTurleri.Items.Remove(listBox_FileSpider_DosyaTurleri.SelectedItem);
        }
        //Dosya Türü Ekle
        private void button_FileSpider_DosyaTuruEkle_Click(object sender, EventArgs e)
        {
            listBox_FileSpider_DosyaTurleri.Items.Add(textBox_FileSpider_DosyaTuruEkle.Text);
        }
        #endregion

        #region DNS Lookup
        private void dnsLookup()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/dnslookup/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);

                /* Reverse IP Hatası Olursa */
                if (html.IndexOf("no records found") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin DNS Lookup bilgisi bulunamadı.";
                }
                else
                {
                    //NS
                    for (int i = 0; i < 1000; i++)
                    {
                        if (html.IndexOf("ns" + i.ToString() + ".") != -1)
                        {
                            veriAyiklama(html, "ns" + i.ToString() + ".", 4, "\n");
                            listBox_DnsLookupListeNS.Items.Add("ns" + i.ToString() + "." + veri.Trim());
                        }
                    }
                    textBox_DnsLookupToplamNS.Text = listBox_DnsLookupListeNS.Items.Count.ToString();

                    //MX
                    for (int i = 0; i < 10; i++)
                    {
                        if (html.IndexOf("mx" + i.ToString() + ".") != -1)
                        {
                            veriAyiklama(html, "mx" + i.ToString() + ".", 4, "\n");
                            listBox_DnsLookupListeMX.Items.Add("mx" + i.ToString() + "." + veri.Trim());
                        }
                    }
                    textBox_DnsLookupToplamMX.Text = listBox_DnsLookupListeMX.Items.Count.ToString();
                }
            }
            catch
            {
                /* ReverseIP Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin DNS Lookup bilgisi alınamadı.";
            }
        }
        //Seçili NS
        private void listBox_DnsLookupListeNS_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_DnsLookupSeciliNS.Text = listBox_DnsLookupListeNS.Text;
        }
        //Seçili MX
        private void listBox_DnsLookupListeMX_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_DnsLookupSeciliMX.Text = listBox_DnsLookupListeMX.Text;
        }
        #endregion

        #region Reverse DNS Hedefin IP Adresi
        private void reverseDNS()
        {
            //Hedef IP
            textBox_ReverseDnsIP.Text = textBox_HedefinIPAdresi.Text;
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/reversedns/?q=" + textBox_ReverseDnsIP.Text);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);

                /* TraceRoute Hatası Olursa */
                if (html.IndexOf("No results found") != -1 || html.IndexOf("no records found") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Reverse DNS bilgisi yok.";
                    textBox_ReverseDnsCikti.Text = "Hedefin Reverse DNS bilgisi yok.";
                }
                else
                {
                    textBox_ReverseDnsCikti.Text = html;
                }
            }
            catch
            {
                /* Reverse DNS Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Reverse DNS bilgisi alınamadı.";
                textBox_ReverseDnsIP.Text = "Hedefin Reverse DNS bilgisi alınamadı.";
            }
        }
        #endregion

        #region Reverse DNS Hedefin Ip Aralığı
        private void reverseDNS2()
        {
            //Hedefin ip adresini ip aralığına çevirme
            string ip = textBox_HedefinIPAdresi.Text;
            string son = "";
            int toplam = 0;
            string[] ips = ip.Split('.');
            foreach (string site in ips)
            {
                son = site.ToString();
                toplam = toplam + site.Length + 1;
            }
            toplam = toplam - son.Length - 1;
            ip = ip.Substring(0, toplam).ToString() + "0/24";
            textBox_ReverseDnsIPAralıgi.Text = ip;
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/reversedns/?q=" + ip);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                /* TraceRoute Hatası Olursa */
                if (html.IndexOf("No results found") != -1 || html.IndexOf("no records found") != -1 || html.IndexOf("error input invalid - enter IP or Hostname") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedef ip aralığının Reverse DNS bilgisi yok.";
                }
                else
                {
                    string[] siteler = html.Split('\n');
                    foreach (string site in siteler)
                    {
                        listBox_ReverseDnsCikti.Items.Add(site);
                    }
                    textBox_ReverseDnsSecili.Text = listBox_ReverseDnsCikti.Items.Count.ToString();
                }
            }
            catch
            {
                /* Reverse DNS Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedef ip aralığının Reverse DNS bilgisi alınamadı.";
            }
        }
        //Seçili aktar
        private void listBox_ReverseDnsCikti_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBox_ReverseDnsSecili.Text = listBox_ReverseDnsCikti.Text;
        }
        #endregion

        #region Whois Sorgusu 1
        private void whois()
        {
            try
            {
                // Whois Sitesinde Aranan Hedef Sitenin HTML Kaynak Kod Sonuçları
                Uri url = new Uri("http://kimindir.com/" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);
                HtmlAgilityPack.HtmlDocument dokuman = new HtmlAgilityPack.HtmlDocument();
                dokuman.LoadHtml(html);

                #region NS & IP
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[1]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[2]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[3]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[4]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[5]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[6]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[7]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[8]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[9]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                try
                {
                    HtmlNodeCollection XPath = dokuman.DocumentNode.SelectNodes("/html/body/table/tr[3]/td[3]/table/tr[3]/td/table/tr[6]/td[2]/text()[10]");
                    foreach (var veri in XPath)
                    {
                        string[] parcalar;
                        parcalar = veri.InnerText.Split('-');

                        listBox_Whois_NS.Items.Add(parcalar[0].Replace(" ", ""));
                        listBox_Whois_IP.Items.Add(parcalar[1].Replace(" ", ""));
                    }
                }
                catch { }
                #endregion

            }
            catch
            {
                /* Whois sorgusunda hata olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedef Whois bilgisi alınamadı.";
            }
        }
        //Ns seçildiğinde
        private void listBox_Whois_NS_SelectedIndexChanged(object sender, EventArgs e)
        {
            listBox_Whois_IP.SelectedIndex = listBox_Whois_NS.SelectedIndex;
            textBox_WhoisNsSecili.Text = listBox_Whois_NS.Text;
        }
        //IP Seçildiğinde
        private void listBox_Whois_IP_SelectedIndexChanged(object sender, EventArgs e)
        {
            listBox_Whois_NS.SelectedIndex = listBox_Whois_IP.SelectedIndex;
            textBox_WhoisNsIPSecili.Text = listBox_Whois_IP.Text;
        }
        #endregion

        #region Whois Sorgusu 2
        private void whois2()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/whois/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);

                /* Whois Hatası Olursa */
                if (html.IndexOf("error check your search parameter") != -1 || html.IndexOf("No whois server is known for this kind of object.") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Whois bilgisi alınamadı.";
                }
                else
                {
                    #region Kayıt Eden Firma
                    //Barındığı Firma
                    if (html.IndexOf("Registrar: ") != -1)
                    {
                        veriAyiklama(html, "Registrar: ", 11, "\n");
                        textBox_Whois_Registrar_Firma.Text = veri;
                    }
                    //IANA ID
                    if (html.IndexOf("Sponsoring Registrar IANA ID: ") != -1)
                    {
                        veriAyiklama(html, "Sponsoring Registrar IANA ID: ", 30, "\n");
                        textBox_Whois_Registrar_ID.Text = veri;
                    }
                    //Telefon
                    if (html.IndexOf("Registrar Abuse Contact Phone: ") != -1)
                    {
                        veriAyiklama(html, "Registrar Abuse Contact Phone: ", 31, "\n");
                        textBox_Whois_Registrar_Telefon.Text = veri;
                    }
                    //Eposta
                    if (html.IndexOf("Registrar Abuse Contact Email: ") != -1)
                    {
                        veriAyiklama(html, "Registrar Abuse Contact Email: ", 31, "\n");
                        textBox_Whois_Registrar_Email.Text = veri;
                    }
                    #endregion

                    #region Domain Sahibi Bilgileri
                    //Adı Soyadı
                    if (html.IndexOf("Admin Name: ") != -1)
                    {
                        veriAyiklama(html, "Admin Name: ", 12, "\n");
                        textBox_Whois_AdminAdSoyad.Text = veri;
                    }
                    //Şirketi
                    if (html.IndexOf("Admin Organization: ") != -1)
                    {
                        veriAyiklama(html, "Admin Organization: ", 20, "\n");
                        textBox_Whois_AdminSirketi.Text = veri;
                    }
                    //Telefon
                    if (html.IndexOf("Admin Phone: ") != -1)
                    {
                        veriAyiklama(html, "Admin Phone: ", 13, "\n");
                        textBox_Whois_AdminTelefon.Text = veri;
                    }
                    //Eposta
                    if (html.IndexOf("Admin Email: ") != -1)
                    {
                        veriAyiklama(html, "Admin Email: ", 13, "\n");
                        textBox_Whois_AdminEmail.Text = veri;
                    }
                    //Ülke
                    if (html.IndexOf("Admin Country: ") != -1)
                    {
                        veriAyiklama(html, "Admin Country: ", 15, "\n");
                        textBox_Whois_AdminUlke.Text = veri;
                    }
                    //Şehir
                    if (html.IndexOf("Admin City: ") != -1)
                    {
                        veriAyiklama(html, "Admin City: ", 12, "\n");
                        textBox_Whois_AdminSehir.Text = veri;
                    }
                    //Adres
                    if (html.IndexOf("Admin Street: ") != -1)
                    {
                        veriAyiklama(html, "Admin Street: ", 14, "\n");
                        textBox_Whois_AdminAdres.Text = veri;
                    }
                    #endregion

                    //Güncelleme
                    if (html.IndexOf("Updated Date: ") != -1)
                    {
                        veriAyiklama(html, "Updated Date: ", 14, "\n");
                        veri = veri.Replace("-","");
                        veri = veri.Replace("jun", " Ocak ");
                        veri = veri.Replace("feb", " Şubat ");
                        veri = veri.Replace("mar", " Mart ");
                        veri = veri.Replace("apr", " Şubat ");
                        veri = veri.Replace("may", " Mayıs ");
                        veri = veri.Replace("jun", " Haziran ");
                        veri = veri.Replace("jul", " Temmuz ");
                        veri = veri.Replace("aug", " Ağustos ");
                        veri = veri.Replace("sep", " Eylül ");
                        veri = veri.Replace("oct", " Ekim ");
                        veri = veri.Replace("nov", " Kasım ");
                        veri = veri.Replace("dec", " Aralık ");
                        textBox_Whois_Guncelleme.Text = veri;
                    }
                    //Oluşturma
                    if (html.IndexOf("Creation Date: ") != -1)
                    {
                        veriAyiklama(html, "Creation Date: ", 15, "\n");
                        veri = veri.Replace("-", "");
                        veri = veri.Replace("jun", " Ocak ");
                        veri = veri.Replace("feb", " Şubat ");
                        veri = veri.Replace("mar", " Mart ");
                        veri = veri.Replace("apr", " Şubat ");
                        veri = veri.Replace("may", " Mayıs ");
                        veri = veri.Replace("jun", " Haziran ");
                        veri = veri.Replace("jul", " Temmuz ");
                        veri = veri.Replace("aug", " Ağustos ");
                        veri = veri.Replace("sep", " Eylül ");
                        veri = veri.Replace("oct", " Ekim ");
                        veri = veri.Replace("nov", " Kasım ");
                        veri = veri.Replace("dec", " Aralık ");
                        textBox_Whois_Olusturma.Text = veri;
                    }
                    //Bitiş
                    if (html.IndexOf("Expiration Date: ") != -1)
                    {
                        veriAyiklama(html, "Expiration Date: ", 17, "\n");
                        veri = veri.Replace("-", "");
                        veri = veri.Replace("jun", " Ocak ");
                        veri = veri.Replace("feb", " Şubat ");
                        veri = veri.Replace("mar", " Mart ");
                        veri = veri.Replace("apr", " Şubat ");
                        veri = veri.Replace("may", " Mayıs ");
                        veri = veri.Replace("jun", " Haziran ");
                        veri = veri.Replace("jul", " Temmuz ");
                        veri = veri.Replace("aug", " Ağustos ");
                        veri = veri.Replace("sep", " Eylül ");
                        veri = veri.Replace("oct", " Ekim ");
                        veri = veri.Replace("nov", " Kasım ");
                        veri = veri.Replace("dec", " Aralık ");
                        textBox_Whois_Bitis.Text = veri;
                    }
                }
            }
            catch
            {
                /* ReverseIP Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Reverse IP bilgisi alınamadı.";
            }
        }
        #endregion

        #region Nmap Taraması
        private void NMAP()
        {
            try
            {
                Uri url = new Uri("http://api.hackertarget.com/nmap/?q=" + hedefSite);
                WebClient client = new WebClient();
                string html = client.DownloadString(url);

                /* Nmap Hatası Olursa */
                if (html.IndexOf("error check your api query") != -1 || html.IndexOf("error IP address only") != -1)
                {
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Portları ve Servisleri belirlenemedi.";
                }
                else
                {
                    if (html.IndexOf("PORT") != -1)
                    {
                        //Ayıklama
                        veriAyiklama(html, "PORT", 4, "Service");
                        html = veri;

                        string port = null;
                        string durum = null;
                        string servis = null;
                        string version = null;
                        string p21 = null;
                        string p25 = null;
                        string p80 = null;
                        string p443 = null;

                        try
                        {
                            if (html.IndexOf("21/") != -1)
                            {
                                //21 Port
                                veriAyiklama(html, "21/", 3, "\n");
                                p21 = "21/" + veri.Replace("  ", "+") + "#";
                                //Port
                                veriAyiklama(p21, "21/", 3, "+");
                                port = "21/" + veri.Trim().Replace("+", "");

                                //Durum
                                veriAyiklama(p21, "+", 1, "+");
                                durum = veri.Trim().Replace("open", "Açık");
                                durum = durum.Replace("closed", "Kapalı");
                                durum = durum.Replace("filtered", "Filtreli");

                                //Servis
                                servis = "ftp";

                                //Version
                                veriAyiklama(p21, servis, servis.Length, "#");
                                version = veri.Replace("+", "").Trim();

                                //Listview Ekleme
                                string[] elemanlar = {
                                     port,
                                     durum,
                                     servis,
                                     version
                                     };
                                ListViewItem veriler = new ListViewItem(elemanlar);
                                listView_NmapListesi.Items.Add(veriler);
                            }

                            if (html.IndexOf("25/") != -1)
                            {
                                //25 Port
                                veriAyiklama(html, "25/", 3, "\n");
                                p25 = "25/" + veri.Replace("  ", "+") + "#";
                                //Port
                                veriAyiklama(p25, "25/", 3, "+");
                                port = "25/" + veri.Trim().Replace("+", "");

                                //Durum
                                veriAyiklama(p25, "+", 1, "+");
                                durum = veri.Trim().Replace("open", "Açık");
                                durum = durum.Replace("closed", "Kapalı");
                                durum = durum.Replace("filtered", "Filtreli");

                                //Servis
                                servis = "smtp";

                                //Version
                                veriAyiklama(p25, servis, servis.Length, "#");
                                version = veri.Replace("+", "").Trim();

                                //Listview Ekleme
                                string[] elemanlar = {
                                     port,
                                     durum,
                                     servis,
                                     version
                                     };
                                ListViewItem veriler = new ListViewItem(elemanlar);
                                listView_NmapListesi.Items.Add(veriler);
                            }

                            if (html.IndexOf("80/") != -1)
                            {
                                //80 Port
                                veriAyiklama(html, "80/", 3, "\n");
                                p80 = "80/" + veri.Replace("  ", "+") + "#";

                                //Port
                                veriAyiklama(p80, "80/", 3, "+");
                                port = "80/" + veri.Trim().Replace("+", "");

                                //Durum
                                veriAyiklama(p80, "+", 1, "+");
                                durum = veri.Trim().Replace("open", "Açık");
                                durum = durum.Replace("closed", "Kapalı");
                                durum = durum.Replace("filtered", "Filtreli");

                                //Servis
                                servis = "http";

                                //Version
                                veriAyiklama(p80, servis, servis.Length, "#");
                                version = veri.Replace("+", "").Trim();

                                //Listview Ekleme
                                string[] elemanlar = {
                                     port,
                                     durum,
                                     servis,
                                     version
                                     };
                                ListViewItem veriler = new ListViewItem(elemanlar);
                                listView_NmapListesi.Items.Add(veriler);
                            }

                            if (html.IndexOf("443/") != -1)
                            {
                                //443 Port
                                veriAyiklama(html, "443/", 4, "\n");
                                p443 = "443/" + veri + "#";

                                //Port
                                veriAyiklama(p443, "443/", 4, " ");
                                port = "443/" + veri.Trim().Replace("+", "");

                                //Servis
                                if (p443.IndexOf("https") != -1) 
                                {
                                    servis = "https";
                                }
                                else if (p443.IndexOf("ssl/http") != -1)
                                {
                                    servis = "ssl/http";
                                }

                                //Durum
                                veriAyiklama(p443, port, port.Length, servis);
                                durum = veri.Trim().Replace("open", "Açık");
                                durum = durum.Replace("closed", "Kapalı");
                                durum = durum.Replace("filtered", "Filtreli");

                                //Version
                                veriAyiklama(p443, servis, servis.Length, "#");
                                version = veri.Replace("+", "").Trim();

                                //Listview Ekleme
                                string[] elemanlar = {
                                     port,
                                     durum,
                                     servis,
                                     version
                                     };
                                ListViewItem veriler = new ListViewItem(elemanlar);
                                listView_NmapListesi.Items.Add(veriler);
                            }
                        }
                        catch { }
                    }
                    else
                    {
                        /* Nmap Hatası Olursa */
                        //Bilgi Mesajı
                        StatusLabel1.ForeColor = Color.DarkRed;
                        StatusLabel1.Text = hedefSite + " hedefin Portları ve Servisleri belirlenemedi.";
                    }
                }
            }
            catch
            {
                /* Nmap Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Portları ve Servisleri belirlenemedi.";
            }
        }
        //Seçili Nmap Servisleri
        private void listView_NmapListesi_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listView_NmapListesi.SelectedItems.Count > 0)
            {
                ListViewItem item = listView_NmapListesi.SelectedItems[0];
                textBox_NmapPort.Text = item.SubItems[0].Text;
                textBox_NmapDurum.Text = item.SubItems[1].Text;
                textBox_NmapServis.Text = item.SubItems[2].Text;
                textBox_NmapVersion.Text = item.SubItems[3].Text;
            }
        }
        #endregion

        #region Robots.txt 
        private void robotsTXT()
        {
            try
            {
                HttpWebRequest istek = (HttpWebRequest)HttpWebRequest.Create("http://" + hedefSite + "/robots.txt");
                HttpWebResponse cevap = (HttpWebResponse)istek.GetResponse();
                if (cevap.StatusCode == HttpStatusCode.OK)
                {
                    Stream receiveStream = cevap.GetResponseStream();
                    StreamReader readStream = null;
                    if (cevap.CharacterSet == null)
                    {
                        readStream = new StreamReader(receiveStream);
                    }
                    else
                    {
                        readStream = new StreamReader(receiveStream, Encoding.GetEncoding(cevap.CharacterSet));
                    }
                    string html = readStream.ReadToEnd();
                    cevap.Close();
                    readStream.Close();
                    richTextBox_RobotsTXT.Text = html;
                }
                else
                {
                    /* Robots.txt Hatası Olursa */
                    //Bilgi Mesajı
                    StatusLabel1.ForeColor = Color.DarkRed;
                    StatusLabel1.Text = hedefSite + " hedefin Robots.txt sayfasına ulaşılamadı.";
                    richTextBox_RobotsTXT.Text = "Hedefin Robots.txt sayfasına ulaşılamadı.";
                }
            }
            catch
            {
                /* Robots.txt Hatası Olursa */
                //Bilgi Mesajı
                StatusLabel1.ForeColor = Color.DarkRed;
                StatusLabel1.Text = hedefSite + " hedefin Robots.txt bilgisi alınamadı.";
                richTextBox_RobotsTXT.Text = "Hedefin Robots.txt bilgisi alınamadı.";

            }
        }
        #endregion



        #region Temizlik :)
        private void temizlik()
        {
            /* Gerekli Yerleri Temizleme */

            //Düzeltmeler
            StatusLabel1.ForeColor = Color.Black;

            //Http Headers
            richTextBox_HTTPHeaders.Clear();
            textBox_HedefServerBilgisi.Clear();
            textBox_HedefKodlamaBilgisi.Clear();
            textBox_HedefYonlendirilenSite.Clear();

            //Test Ping
            richTextBox_TestPing.Clear();
            textBox_TestPingAciklama.Clear();
            textBox_TahminiIsletimSistemi.Clear();
            textBox_HedefinIPAdresi.Clear();

            //TraceRoute
            richTextBox_TraceRoute.Clear();

            //ReverseIP
            listBox_ReverseIPList.Items.Clear();
            textBox_ReverseIP_ToplamSite.Clear();
            textBox_ReverseIP_SeciliSite.Clear();

            //Spider
            listBox_SpiderList.Items.Clear();
            textBox_Spider_ToplamURL.Clear();
            textBox_Spider_SeciliAdres.Clear();

            //File Spider
            textBox_FileSpider_SeciliURL.Clear();
            listBox_FileSpider_Sonuclar.Items.Clear();
            textBox_FileSpider.Clear();
            textBox_FileSpider_DosyaTuruEkle.Clear();

            //Reverse DNS
            textBox_ReverseDnsIP.Clear();
            textBox_ReverseDnsCikti.Clear();
            textBox_ReverseDnsIPAralıgi.Clear();
            listBox_ReverseDnsCikti.Items.Clear();
            textBox_ReverseDnsToplam.Clear();
            textBox_ReverseDnsSecili.Clear();

            //Whois
            listBox_Whois_NS.Items.Clear();
            listBox_Whois_IP.Items.Clear();
            textBox_WhoisNsSecili.Clear();
            textBox_WhoisNsIPSecili.Clear();
            textBox_Whois_Olusturma.Clear();
            textBox_Whois_Bitis.Clear();
            textBox_Whois_Guncelleme.Clear();
            textBox_Whois_Registrar_Firma.Clear();
            textBox_Whois_Registrar_ID.Clear();
            textBox_Whois_Registrar_Telefon.Clear();
            textBox_Whois_Registrar_Email.Clear();
            textBox_Whois_AdminAdSoyad.Clear();
            textBox_Whois_AdminSirketi.Clear();
            textBox_Whois_AdminTelefon.Clear();
            textBox_Whois_AdminEmail.Clear();
            textBox_Whois_AdminUlke.Clear();
            textBox_Whois_AdminSehir.Clear();
            textBox_Whois_AdminAdres.Clear();

            //Nmap
            listView_NmapListesi.Items.Clear();
            textBox_NmapPort.Clear();
            textBox_NmapDurum.Clear();
            textBox_NmapServis.Clear();
            textBox_NmapVersion.Clear();
        }
        #endregion

        private void button_AdminPanelBaslat_Click(object sender, EventArgs e)
        {
            listView1.Items.Clear();
            button_AdminPanelDurdur.Enabled = true;
            button_AdminPanelBaslat.Enabled = false;
            textBox_AdminPanelSeciliSite.ReadOnly = true;
            /*label_Durum.Text = "Admin paneli tarama işlemi gerçekleştiriliyor.";
            islem = new Thread(new ThreadStart(tarama));
            islem.Start();*/
        }

        private void button_AdminPanelDurdur_Click(object sender, EventArgs e)
        {
            button_AdminPanelDurdur.Enabled = false;
            button_AdminPanelBaslat.Enabled = true;
            textBox_AdminPanelSeciliSite.ReadOnly = false;
            /*label_Durum.Text = "Admin paneli tarama işlemi durduruldu.";
            islem.Abort();*/
        }
       



    }
}
